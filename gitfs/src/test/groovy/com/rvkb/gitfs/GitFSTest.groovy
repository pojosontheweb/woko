package com.rvkb.gitfs

import junit.framework.TestCase

class GitFSTest extends TestCase {

  String getRepoPath() {
    return System.getProperty("java.io.tmpdir") + File.separator +
            "myrepo" + System.currentTimeMillis() + "/.git"
  }
  private GitFS getGfs() {
    GitFS gfs = new GitFSBuilder(getRepoPath()).
        setCreateIfEmpty(true).
        build()
    assert gfs != null
    return gfs
  }

  void testRepoIsInitializedWhenEmpty() {
    String str = gfs.doInSession(new UserInfo("foo", "foo@bar.com")) { Session s ->
      s.readFile(new File(s.getAbsolutePath("gitfs.txt"))) { InputStream is ->
        new InputStreamReader(is).readLine()
      }
    }
    assert str == "File generated by GitFS."
  }

  void testWriteFile() {
    def ms = System.currentTimeMillis()
    String txt = "this is some text $ms"
    String msg = "commit message $ms"
    String filePath = null
    WriteResult wr = gfs.doInSession(new UserInfo("foo", "foo@bar.com")) { Session session ->
      filePath = session.getAbsolutePath("test.txt")
      ByteArrayInputStream bis = new ByteArrayInputStream(txt.getBytes())
      return session.writeToFile(bis, new File(filePath), msg)
    }
    assertNotNull wr
    assertEquals msg, wr.message
    assertEquals "foo", wr.userInfo.username
    assertEquals "foo@bar.com", wr.userInfo.email
    new File(filePath).withReader { r ->
      assertEquals txt, r.readLine()
    }
  }

  void testGetRevisions() {
    def ms = System.currentTimeMillis()
    String fileName = "textRevs${ms}.txt"
    GitFS g = getGfs()
    for (it in 1..10) {
      String txt = "content$it"
      g.doInSession(new UserInfo("foo", "foo@bar.com")) { Session session ->
        ByteArrayInputStream bis = new ByteArrayInputStream(txt.getBytes())
        return session.writeToFile(bis, new File(session.getAbsolutePath(fileName)), "commit num $it")
      }
    }
    Iterable<Revision> revisions = g.doInSession(new UserInfo("foo", "foo@bar.com")) { Session s ->
      return s.getRevisions(new File(s.getAbsolutePath(fileName)), 100)
    }
    int count = 0
    revisions.each {
      println it
      count++
    }
    assertEquals 10, count
  }

}
